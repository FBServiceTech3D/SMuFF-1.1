;
; SMuFF PlatformIO Project Configuration File
;

#-----------------------------------------------------------------------------------------------------------------------
# NECESSARY SETTINGS
#
# Pick the display type you use by removing the comment char (#) accordingly
#-----------------------------------------------------------------------------------------------------------------------
[display]
build_flags =   #-D USE_TWI_DISPLAY
                #-D USE_LEONERD_DISPLAY
                #-D USE_MINI12864_PANEL_V21 -D USE_FASTLED_BACKLIGHT
                #-D USE_MINI12864_PANEL_V20 -D USE_RGB_BACKLIGHT
                #-D USE_CREALITY_DISPLAY    -D CREALITY_HW_SPI       # comment out second define to use software SPI instead
                #-D USE_DEFAULT_DISPLAY                              # standard RepRap Full Graphics Display
[other]
build_flags =   #-D USE_FASTLED_TOOLS                                # define whether or not you're going to use NeoPixels on tools



#-----------------------------------------------------------------------------------------------------------------------
# SPECIAL OPTIONS
#
# Set special options by adding or removing the comment char (#) only if you're instructed to do so!
#-----------------------------------------------------------------------------------------------------------------------
[options]
build_flags =   -D DEBUG                                            # comment out this define to get rid of any debug messages
                -D __HW_DEBUG__                                     # comment out this define to disable the 500Hz signal on the debug pin
                
                -D SMUFF_V5                                         # comment out this define __only__ if you're compiling for V4 or V6S (see below)
                #-D SMUFF_V6S                                        # define whether or not to use a linear stepper instead of the servo for the Lid mechanics (V6 only)

                #-D USE_SPLITTER_ENDSTOPS                            # define whether or not to use endstops on Feeder for Splitter option
                
                #-D MARLIN2_ONLY                                     # uncomment this define _only_ if you're compiling for Marlin 2.0 with MMU2
                #-D SOFTRESET                                        # uncomment this define in case your bootloader sends data to (USB) serial port after RESET
                -D __LIBMAPLE__                                     # comment out if build_type.core is _not_ "maple" in [STM32_COMMON]
                
                #-D SWAP_Y_STEPPER                                   # special case for E3-V2.0 - swaps Y and E stepper driver



#-----------------------------------------------------------------------------------------------------------------------
# SPECIAL FLAGS (don't use unless you really know what they're for)
#-----------------------------------------------------------------------------------------------------------------------

# Please notice: 
# The -D USE_DDE and -D USE_DUET3D options are obsolete now!
# Use the according Build Environment in "Project Tasks" for compiling for DDE,DUET3D or both.

[relay]
build_flags =   # uncomment the following define if your relay is connected to the "PROBE" pin (old connection point)
                #-D RELAY_ON_PROBE

[multiservo]
lib_deps =      # uncomment the following lines if you're compiling for multiservo
                #adafruit/Adafruit PWM Servo Driver Library @ ~2.4.0
build_flags =   #-D MULTISERVO

#-----------------------------------------------------------------------------------------------------------------------
# BUILD CONFIGURATIONS
#-----------------------------------------------------------------------------------------------------------------------

[platformio]
#default_envs = SKR_E3DIP_RE

#
# STM32 common build flags for USB port usage
#
[USB]
build_flags =   -D ENABLE_USB_SERIAL
                -D SERIAL_USB
                -D USBD_USE_CDC
                -D USBCON
                # not sure about the next two
                -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
                -D HAL_PCD_MODULE_ENABLED

#
# include these if you're going to use TMC stepper drivers
# and set the definitions accordingly
#
[TMC]
lib_deps        = # both libraries being used for TMC stepper drivers
                https://github.com/teemuatlut/TMCStepper
                https://github.com/FYSETC/SoftwareSerialM
build_flags =   -D HAS_TMC_SUPPORT
                -D TMC_SW_BAUDRATE=19200
                -D TMC_HW_BAUDRATE=250000

[common]
build_type  =    release
build_flags =    # some compiler options to get rid of not really critical messages while compiling
                -Wno-unused-variable
                -Wno-format-extra-args
                -Wno-misleading-indentation
                
                # U8G2 library wrappers
                -Wl,--wrap=u8g2_UserInterfaceSelectionList
                -Wl,--wrap=u8x8_byte_arduino_2nd_hw_spi
                -Wl,--wrap=u8g2_UserInterfaceMessage
                -std=gnu++14
                -Os
                -g0  # generate debug information, use: -g for default, -g1 for minimal, -g3 for maximal  or -g0 for no debug information

build_unflags = -std=gnu++11

lib_deps =      https://github.com/greiman/SdFat@>=2.1.0                        # SD-Card file system library
                ArduinoJson@=6.18.1                                             # JSON library for the configuration file
                U8G2                                                            # LC-Display library
                https://github.com/technik-gegg/LeoNerd-OLED-Module-Library.git # My own library for LeoNerd's OLED Module

[FastLED]
lib_deps =      https://github.com/13rac1/FastLED-STM32                         # FastLED library fork; Instead of original one because of the compile time circular reference issues
                #FastLED@>=3.4.0                                                # FastLED library (original, not used because of compiling errors)


[STM32_COMMON]
platform            = ststm32@>11.0.0
framework           = arduino
board_build.core    = maple # ststm32 will not compile because of the libraries used

#
# BIGTREETECH SKR MINI V1.1 (flashing through SD-Card, using the default bootloader)
#
[env:SKR_MINI]
extends              = STM32_COMMON
board                = genericSTM32F103RC
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
                       ${FastLED.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini
                       -D __BRD_SKR_MINI
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini/STM32F103RC_SKR_MINI_256K.ld
#
# same as above, using DDE
#
[env:SKR_MINI___DDE] 
extends              = env:SKR_MINI
build_flags          = ${env:SKR_MINI.build_flags} -D USE_DDE
#
# same as above for Duet3D (RRF)
#
[env:SKR_MINI___DUET] 
extends              = env:SKR_MINI
build_flags          = ${env:SKR_MINI.build_flags} -D USE_DUET3D
#
# same as above for DDE and Duet3D (RRF)
#
[env:SKR_MINI___DDE+DUET] 
extends              = env:SKR_MINI
build_flags          = ${env:SKR_MINI.build_flags} -D USE_DDE -D USE_DUET3D

#
# BIGTREETECH SKR E3 V1.2 (flashing through SD-Card, using the default bootloader)
#
[env:SKR_E3_12]
extends              = STM32_COMMON
board                = genericSTM32F103RC
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
                       ${FastLED.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3-1.2
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3-1.2/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3-1.2/STM32F103RC_SKR_MINI_256K.ld
#
# same as above, using DDE
#
[env:SKR_E3_12___DDE] 
extends              = env:SKR_E3_12
build_flags          = ${env:SKR_E3_12.build_flags} -D USE_DDE
#
# same as above for Duet3D (RRF)
#
[env:SKR_E3_12___DUET] 
extends              = env:SKR_E3_12
build_flags          = ${env:SKR_E3_12.build_flags} -D USE_DUET3D
#
# same as above for DDE and Duet3D (RRF)
#
[env:SKR_E3_12___DDE+DUET] 
extends              = env:SKR_E3_12
build_flags          = ${env:SKR_E3_12.build_flags} -D USE_DDE -D USE_DUET3D

#
# BIGTREETECH SKR MINI E3-DIP V1.1 with RET6 MCU (flashing through SD-Card, using the default bootloader)
#
[env:SKR_E3DIP_RE] # <-- newer boards are RET6
extends              = STM32_COMMON
board                = genericSTM32F103RE  
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
                       ${FastLED.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3DIP
                       -D __BRD_SKR_MINI_E3DIP
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
                       ${relay.build_flags}
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3DIP/STM32F103RE_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3DIP/STM32F103RE_SKR_MINI_512K.ld
#
# same as above, using DDE
#
[env:SKR_E3DIP_RE___DDE] 
extends              = env:SKR_E3DIP_RE
build_flags          = ${env:SKR_E3DIP_RE.build_flags} -D USE_DDE
#
# same as above for Duet3D (RRF)
#
[env:SKR_E3DIP_RE___DUET] 
extends              = env:SKR_E3DIP_RE
build_flags          = ${env:SKR_E3DIP_RE.build_flags} -D USE_DUET3D
#
# same as above for DDE and Duet3D (RRF)
#
[env:SKR_E3DIP_RE___DDE+DUET] 
extends              = env:SKR_E3DIP_RE
build_flags          = ${env:SKR_E3DIP_RE.build_flags} -D USE_DDE -D USE_DUET3D

#
# BIGTREETECH SKR E3-DIP V1.1 with RCT6 MCU (flashing through SD-Card, using the default bootloader)
#
[env:SKR_E3DIP_RC]  # <-- older boards are RCT6
extends              = STM32_COMMON
board                = genericSTM32F103RC  
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
                       ${FastLED.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3DIP
                       -D __BRD_SKR_MINI_E3DIP
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3DIP/STM32F103RC_SKR_MINI.py          # <-- older boards are RCT6
board_build.ldscript = include/SKR_mini_E3DIP/STM32F103RC_SKR_MINI_256K.ld
#
# same as above, using DDE
#
[env:SKR_E3DIP_RC___DDE] 
extends              = env:SKR_E3DIP_RC
build_flags          = ${env:SKR_E3DIP_RC.build_flags} -D USE_DDE
#
# same as above for Duet3D (RRF)
#
[env:SKR_E3DIP_RC___DUET] 
extends              = env:SKR_E3DIP_RC
build_flags          = ${env:SKR_E3DIP_RC.build_flags} -D USE_DUET3D
#
# same as above for DDE and Duet3D (RRF)
#
[env:SKR_E3DIP_RC___DDE+DUET] 
extends              = env:SKR_E3DIP_RC
build_flags          = ${env:SKR_E3DIP_RC.build_flags} -D USE_DDE -D USE_DUET3D

#
# BIGTREETECH SKR E3 V2.0 with RET6 MCU (flashing through SD-Card, using the default bootloader)
#
[env:SKR_E3_20_RE] # <-- newer boards are RET6
extends              = STM32_COMMON
board                = genericSTM32F103RE   
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
                       ${FastLED.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3-2.0
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3-2.0/STM32F103RE_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3-2.0/STM32F103RE_SKR_MINI_512K.ld
#
# same as above, using DDE
#
[env:SKR_E3_20_RE___DDE] 
extends              = env:SKR_E3_20_RE
build_flags          = ${env:SKR_E3_20_RE.build_flags} -D USE_DDE
#
# same as above for Duet3D (RRF)
#
[env:SKR_E3_20_RE___DUET] 
extends              = env:SKR_E3_20_RE
build_flags          = ${env:SKR_E3_20_RE.build_flags} -D USE_DUET3D
#
# same as above for DDE and Duet3D (RRF)
#
[env:SKR_E3_20_RE___DDE+DUET] 
extends              = env:SKR_E3_20_RE
build_flags          = ${env:SKR_E3_20_RE.build_flags} -D USE_DDE -D USE_DUET3D

#
# BIGTREETECH SKR E3 V2.0 with RCT6 MCU (flashing through SD-Card, using the default bootloader)
#
[env:SKR_E3_20_RC] # <-- older boards are RCT6
extends              = STM32_COMMON
board                = genericSTM32F103RC   
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
                       ${FastLED.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3-2.0
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3-2.0/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3-2.0/STM32F103RC_SKR_MINI_256K.ld
#
# same as above, using DDE
#
[env:SKR_E3_20_RC___DDE] 
extends              = env:SKR_E3_20_RC
build_flags          = ${env:SKR_E3_20_RC.build_flags} -D USE_DDE
#
# same as above for Duet3D (RRF)
#
[env:SKR_E3_20_RC___DUET] 
extends              = env:SKR_E3_20_RC
build_flags          = ${env:SKR_E3_20_RC.build_flags} -D USE_DUET3D
#
# same as above for DDE and Duet3D (RRF)
#
[env:SKR_E3_20_RC___DDE+DUET] 
extends              = env:SKR_E3_20_RC
build_flags          = ${env:SKR_E3_20_RC.build_flags} -D USE_DDE -D USE_DUET3D

#
# WARNING: This environment is experimental and will most probably not compile!
#
# BIGTREETECH SKR E3 RRF (flashing through SD-Card, using the default bootloader)
#
[env:SKR_E3_RRF]
extends              = STM32_COMMON
board                = genericSTM32F407VGT6
lib_ignore           = FastLED
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${other.build_flags}
                       ${options.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_E3-RRF
                       -D __BRD_SKR_E3_RRF
                       -D __STM32F4__ 
                       -D STM32_HIGH_DENSITY
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
                       -U USE_FASTLED_TOOLS
                       -U USE_FASTLED_BACKLIGHT
extra_scripts        = include/SKR_E3-RRF/STM32F407VGT6_SKR_RRF.py
board_build.ldscript = include/SKR_E3-RRF/STM32F407VGT6_SKR_RRF.ld
