;
; SMuFF PlatformIO Project Configuration File
;

[platformio]
default_envs = BIGTREE_SKR_MINI_E3DIP_SD

#
# TODO: Pick a display type here by removing / setting
#       the comment char (#) accordingly
[display]
build_flags =   -D USE_TWI_DISPLAY
                #-D USE_LEONERD_DISPLAY
                #-D USE_MINI12864_PANEL_V21 -D USE_FASTLED_BACKLIGHT
                #-D USE_MINI12864_PANEL_V20 -D USE_RGB_BACKLIGHT
                #-D USE_CREALITY_DISPLAY    -D CREALITY_HW_SPI      # comment out second define to use software SPI instead
                #-D USE_DEFAULT_DISPLAY                             # standard RepRap Full Graphics Display

[options]
build_flags =   -D debug                                            # comment out this define to get rid of any debug messages
                -D __HW_DEBUG__                                     # comment out this define to disable the 500Hz signal on the debug pin
                -D SMUFF_V5                                         # comment out this define _only_ if you're compiling for V6S (see below) or V4
                #-D SMUFF_V6S                                       # define whether or not to use a linear stepper instead of the servo for the Lid mechanics
                #-D USE_SPLITTER_ENDSTOPS                           # define whether or not to use endstops on Feeder for Splitter option
                #-D USE_FASTLED_TOOLS                               # define whether or not you're going to use NeoPixels on tools
                #-D MARLIN2_ONLY                                    # uncomment this define only if you're compiling for Marlin 2.0 with MMU2
                #-D SOFTRESET                                       # uncomment this define in case your bootloader sends data to (USB) serial port after RESET

[extruder]
build_flags =   # this option defines whether or not to use the SMuFF on a Direct Drive Extruder setup
                # for details see: https://sites.google.com/view/the-smuff/how-to/tutorials/set-up-a-dde
                #-D USE_DDE

[relay]
build_flags =   # uncomment the following define if your relay is connected to the "PROBE" pin (old connection point)
                #-D RELAY_ON_PROBE

[multiservo]
lib_deps =      # uncomment the following lines if you're compiling for multiservo
                #adafruit/Adafruit PWM Servo Driver Library @ ~2.4.0
build_flags =   #-D MULTISERVO

#
# STM32 common build flags for USB port usage
#
[USB]
build_flags =   -D ENABLE_USB_SERIAL
                -D SERIAL_USB
                -D USBD_USE_CDC
                -D USBCON
                # not sure about the next two
                -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
                -D HAL_PCD_MODULE_ENABLED

#
# include these if you're going to use TMC stepper drivers
# and set the definitions accordingly
#
[TMC]
lib_deps        = # both libraries being used for TMC stepper drivers
                https://github.com/teemuatlut/TMCStepper
                https://github.com/FYSETC/SoftwareSerialM
build_flags =   -D HAS_TMC_SUPPORT
                -D TMC_SW_BAUDRATE=19200
                -D TMC_HW_BAUDRATE=250000


[common]
build_type  =    release
build_flags =    # some compiler options to get rid of not really critical messages while compiling
                -Wno-unused-variable
                -Wno-format-extra-args
                -Wno-misleading-indentation
                
                # U8G2 library wrappers
                -Wl,--wrap=u8g2_UserInterfaceSelectionList
                -Wl,--wrap=u8x8_byte_arduino_2nd_hw_spi
                -Wl,--wrap=u8g2_UserInterfaceMessage
                -std=gnu++14
                -Os
                -g0  # generate debug information, use: -g for default, -g1 for minimal, -g3 for maximal  or -g0 for no debug information

build_unflags = -std=gnu++11

lib_deps =      https://github.com/greiman/SdFat                                # SD-Card file system library
                ArduinoJson@=6.18.1                                             # JSON library for the configuration file
                U8G2                                                            # LC-Display library
                https://github.com/13rac1/FastLED-STM32                         # FastLED library fork; Instead of original one because of the compile time circular reference issues
                #FastLED@>=3.4.0                                                # FastLED library (original)
                https://github.com/technik-gegg/LeoNerd-OLED-Module-Library.git # My own library for LeoNerd's OLED Module

#
# BIGTREETECH SKR MINI E3 V1.2 (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3_1.2_SD]
platform             = ststm32@>=11.0.0
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${options.build_flags}
                       ${extruder.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3/STM32F103RC_SKR_MINI_256K.ld

#
# BIGTREETECH SKR MINI E3-DIP V1.1 with RET6 MCU (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3DIP_SD]
platform             = ststm32@>=11.0.0
framework            = arduino
board                = genericSTM32F103RE  # <-- newer boards are RET6
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${options.build_flags}
                       ${extruder.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3DIP
                       -D __BRD_SKR_MINI_E3DIP
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
                       ${relay.build_flags}
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3DIP/STM32F103RE_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3DIP/STM32F103RE_SKR_MINI_512K.ld

#
# BIGTREETECH SKR MINI E3-DIP V1.1 with RCT6 MCU (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3DIP_RC_SD]
platform             = ststm32@>=11.0.0
framework            = arduino
board                = genericSTM32F103RC  # <-- older boards are RCT6
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${options.build_flags}
                       ${extruder.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3DIP
                       -D __BRD_SKR_MINI_E3DIP
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3DIP/STM32F103RC_SKR_MINI.py          # <-- older boards are RCT6
board_build.ldscript = include/SKR_mini_E3DIP/STM32F103RC_SKR_MINI_256K.ld

#
# BIGTREETECH SKR MINI E3 V2.0 (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3_2.0_SD]
platform             = ststm32@>=11.0.0
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       ${multiservo.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${options.build_flags}
                       ${extruder.build_flags}
                       ${multiservo.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3-2.0
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
                       -D ARDUINO_ARCH_STM32
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3-2.0/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3-2.0/STM32F103RC_SKR_MINI_256K.ld
